import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

public class SlidingWindowMaximum {

    /**
     * Finds the maximum element in each sliding window of size k.
     *
     * @param arr The input integer array.
     * @param k   The size of the sliding window.
     * @return An array containing the maximum element for each window.
     */
    public int[] maxSlidingWindow(int[] arr, int k) {
        if (arr == null || k <= 0) {
            return new int[0];
        }

        // Deque to store indices of elements.
        // The front of the deque will always have the index of the maximum element.
        Deque<Integer> deque = new ArrayDeque<>();
        List<Integer> result = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            // Remove indices that are out of the current window.
            if (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {
                deque.removeFirst();
            }

            // Remove smaller elements from the back of the deque to maintain
            // a decreasing order of values.
            while (!deque.isEmpty() && arr[deque.peekLast()] <= arr[i]) {
                deque.removeLast();
            }

            // Add the current index to the deque.
            deque.addLast(i);

            // Add the maximum of the current window to the result list once the window is full.
            if (i >= k - 1) {
                result.add(arr[deque.peekFirst()]);
            }
        }

        // Convert the List to an int array.
        int[] output = new int[result.size()];
        for (int i = 0; i < result.size(); i++) {
            output[i] = result.get(i);
        }

        return output;
    }

    public static void main(String[] args) {
        SlidingWindowMaximum solver = new SlidingWindowMaximum();

        // Example 1: arr = [1, 3, -1, -3, 5, 3, 6, 7], k = 3
        int[] arr1 = {1, 3, -1, -3, 5, 3, 6, 7};
        int k1 = 3;
        int[] output1 = solver.maxSlidingWindow(arr1, k1);
        System.out.println("Input: arr = [1, 3, -1, -3, 5, 3, 6, 7], k = 3");
        System.out.print("Output: [");
        for (int i = 0; i < output1.length; i++) {
            System.out.print(output1[i] + (i == output1.length - 1 ? "" : ", "));
        }
        System.out.println("]"); // Expected: [3, 3, 5, 5, 6, 7]

        // Test Case 1: arr = [1, 5, 3, 2, 4, 6], k = 3
        int[] arr2 = {1, 5, 3, 2, 4, 6};
        int k2 = 3;
        int[] output2 = solver.maxSlidingWindow(arr2, k2);
        System.out.println("\nInput: arr = [1, 5, 3, 2, 4, 6], k = 3");
        System.out.print("Output: [");
        for (int i = 0; i < output2.length; i++) {
            System.out.print(output2[i] + (i == output2.length - 1 ? "" : ", "));
        }
        System.out.println("]"); // Expected: [5, 5, 4, 6]
    }
}
