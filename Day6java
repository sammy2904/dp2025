import java.util.*;

public class ZeroSumSubarrays {
    public static List<int[]> findZeroSumSubarrays(int[] arr) {
        List<int[]> result = new ArrayList<>();
        Map<Long, List<Integer>> map = new HashMap<>(); // prefixSum -> list of indices
        long prefixSum = 0;

        for (int i = 0; i < arr.length; i++) {
            prefixSum += arr[i];

            // Case 1: If prefix sum is 0, subarray (0, i)
            if (prefixSum == 0) {
                result.add(new int[]{0, i});
            }

            // Case 2: If prefix sum seen before, subarrays exist
            if (map.containsKey(prefixSum)) {
                for (int startIdx : map.get(prefixSum)) {
                    result.add(new int[]{startIdx + 1, i});
                }
            }

            // Store prefix sum index
            map.computeIfAbsent(prefixSum, k -> new ArrayList<>()).add(i);
        }

        return result;
    }

    // Testing
    public static void main(String[] args) {
        int[][] testCases = {
            {1, 2, -3, 3, -1, 2},
            {4, -1, -3, 1, 2, -1},
            {1, 2, 3, 4},
            {0, 0, 0},
            {-3, 1, 2, -3, 4, 0}
        };

        for (int[] test : testCases) {
            List<int[]> result = findZeroSumSubarrays(test);
            System.out.print("Input: " + Arrays.toString(test) + "\nOutput: ");
            for (int[] pair : result) {
                System.out.print("(" + pair[0] + ", " + pair[1] + ") ");
            }
            System.out.println("\n");
        }
    }
}
