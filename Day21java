import java.util.Stack;

public class ReverseStack {

    // Helper function to insert an element at the bottom of the stack
    private static void insertAtBottom(Stack<Integer> stack, int element) {
        // Base case: if the stack is empty, push the element
        if (stack.isEmpty()) {
            stack.push(element);
            return;
        }

        // Recursive step: pop the top element, recursively call the function, and then push the popped element back
        int top = stack.pop();
        insertAtBottom(stack, element);
        stack.push(top);
    }

    // Main function to reverse the stack recursively
    public static void reverse(Stack<Integer> stack) {
        // Base case: if the stack is empty, there is nothing to reverse
        if (stack.isEmpty()) {
            return;
        }

        // Recursive step: pop the top element, reverse the rest of the stack, and then insert the popped element at the bottom
        int top = stack.pop();
        reverse(stack);
        insertAtBottom(stack, top);
    }

    // Main method to demonstrate the functionality
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        stack.push(4);

        System.out.println("Original Stack: " + stack); // Output: [1, 2, 3, 4]

        reverse(stack);

        System.out.println("Reversed Stack: " + stack); // Output: [4, 3, 2, 1]
    }
}
